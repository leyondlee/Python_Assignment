import socket
import select
import re

#Description: Send global message
#Parameters: dictionary/list/tuple, string, boolean
#Return: nil
def sendGlobal(clients,msg,log=True):
   if log:
      print msg.strip()
   
   for c in clients:
      try:
         c.sendall(msg)
      except:
         pass

#Description: Send message to specific client
#Parameters: socket, string, boolean
#Return: nil
def sendToClient(client,msg,log=True):
   if log:
      print msg.strip()
      
   try:
      client.sendall(msg)
   except:
      pass

#Description: Format client info into string
#Parameters: dictionary/list/tuple
#Return: string
def formatClientInfo(clients):
   if len(clients) > 0:
      string = 'Server:\n==================== Clients ====================\n'
      string = string + '%-20s\t\t%s\n' % ('IP','Name')
      for c in clients:
         info = clients[c]
         address = '%s:%s' % (info[0][0],info[0][1])
         name = info[1]
         if not name:
            name = '-'
         string = string + ('%-20s\t\t%s\n' % (address,name))
      string = string + '=================================================\n'
   else:
      string = 'Server: No clients connected\n'

   return string

#Description: Get name from data
#Parameters: string
#Return: string
def getNameFromData(data):
   name = None
   try:
      name = re.search(r'^\[([^\[\]\:]*)\]\:',data).group(1)
   except:
      pass

   return name

#Description: Format address generated by socket accept
#Parameters: list
#Return: string
def addressToIP(address):
   return '%s:%d' % (address[0],address[1])

def getIPFromData(data):
   ip = None
   try:
      ip = re.search(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d{1,5}',data).group(0)
   except:
      pass

   return ip

#Description: Find IP from dictionary
#Parameters: dictionary/list/tuple, string
#Return: socket
def findIP(clients,ip):
   client = None
   for c in clients:
      address = clients[c][0]
      if addressToIP(address) == ip:
         client = c
         break
         
   return client

#Server socket for client connection
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server.bind(('0.0.0.0',8089))
server.listen(5)

#Socket for admin connection
admin = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
admin.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
admin.bind(('0.0.0.0',8090))
admin.listen(5)

#recv size
size = 255

#Variables
clients = {}
admins = {}

print 'Server started'

run = True
while run:
   #All users and admins
   connected = list(clients) + list(admins)

   #IO objects
   input = [server,admin] + connected

   #Wait for object to be ready
   rlist, wlist, xlist = select.select(input,[],[])

   for r in rlist: #Loop through ready objects
      if r == server:
         #Client connect
         conn, address = server.accept()
         sendGlobal(connected,('Server: %s has connected\n' % (addressToIP(address))))
         clients[conn] = [address,'']
      elif r == admin:
         #Admin connect
         conn, address = admin.accept()
         sendGlobal(admins,('Server: [ADMIN] %s has connected\n' % (addressToIP(address))))
         admins[conn] = [address,'']
      else:
         disconnected = False
         try:
            data = r.recv(size)
            if data:
               if r in admins: #Check if admin
                  fchar = data[0]
                  string = ''
                  if fchar == '!': #Check if data is a command
                     command = data[1:] #Exclude '!'
                     print 'Admin command: ', command
                     if command == 'shutdown':
                        #Shutdown server
                        run = False
                        break
                     elif command == 'show':
                        #Show client info
                        string = formatClientInfo(clients)
                     elif command[:len('kick')] == 'kick':
                        #Kick specific client
                        ip = getIPFromData(command[len('kick'):].strip())
                        client = findIP(clients,ip) #Find client with given IP
                        if client:
                           #IP exists
                           client.close()
                           del clients[client]
                           sendGlobal(connected,('Server: %s has been kicked\n' % (ip)))
                        else:
                           #IP not found
                           string = 'Server: %s is not connected\n' % (ip)
                     elif command[:len('broadcast')] == 'broadcast':
                        #Broadcast message to all
                        msg = command[len('broadcast'):].strip()
                        sendGlobal(connected,'Server: [BROADCAST] %s\n' % msg)
                     else:
                        #Unknown command
                        string = 'Server: Unknown command \'%s\'\n' % (data)

                     if string:
                        #Message to send back to admin
                        sendToClient(r,string)
                  elif fchar == '@':
                     #Private message
                     ip = getIPFromData(data.strip('@')) #Get given IP
                     client = findIP(clients,ip) #Find client with given IP
                     if client:
                        #Client exists
                        name = admins[r][1]
                        if not name: #Check if admin has name
                           name = 'Admin'
                        msg = data[len(ip) + 1:].strip()
                        sendToClient(client, '[%s -> You]:%s\n' % (name,msg), False)

                        if name == 'Admin': #Check if name is default
                           name = 'Admin (%s)' % (addressToIP(admins[r][0]))
                        else:
                           name = '%s (%s)' % (name,addressToIP(admins[r][0]))

                        cname = clients[client][1]
                        if cname: #Check if client has name
                           cname = '%s (%s)' % (cname,addressToIP(clients[client][0]))
                        else:
                           cname = 'Client (%s)' % (addressToIP(clients[client][0]))
                        print ('[%s -> %s]: %s' % (name,cname,msg)).strip()

                        msg = '[You -> %s]:%s\n' % (cname, msg)
                     else:
                        #Client does not exists
                        if ip:
                           msg = 'Server: %s is not connected\n' % (ip)
                        else:
                           msg = 'Server: Invalid IP\n'

                     sendToClient(r,msg,False)
                  else:
                     if not admins[r][1]: #Check if admin already has name
                        #Store admin name
                        admins[r][1] = getNameFromData(data)
                        
                     sendGlobal(connected,data)
               else:
                  if not clients[r][1]: #Check if client already has name
                     #Store client name
                     clients[r][1] = getNameFromData(data)
                     
                  sendGlobal(connected,data)
            else:
               #No connection
               disconnected = True
         except:
               pass

         if disconnected:
            #Handle disconnect
            if r in admins:
               info = admins[r][1]
               if not info:
                  info = addressToIP(admins[r][0])
               else:
                  info = info + (' (%s)' % (addressToIP(admins[r][0])))
               sendGlobal(admins,('Server: [ADMIN] %s has disconnected\n' % (info)))
               del admins[r]
            else:
               info = clients[r][1]
               if not info:
                  info = addressToIP(clients[r][0])
               sendGlobal(connected,('Server: %s has disconnected\n' % (info)))
               del clients[r]
            r.close()

#Close all connections
for c in clients:
   c.close()

for a in admins:
   a.close()

server.close()
admin.close()

print 'Server shutting down'
